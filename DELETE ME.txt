#python3 manage.py runserver

Token 11/24/21
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

Get Email Address from user models
https://stackoverflow.com/questions/20400767/how-to-get-the-email-address-from-auth-user-table-of-requested-user-id-in-django

Growing textbox
https://css-tricks.com/auto-growing-inputs-textareas/

DropDown Navbar
https://www.w3schools.com/howto/howto_css_dropdown.asp

Django SearchBar
https://stackoverflow.com/questions/66914241/how-do-i-get-user-input-from-search-bar-to-display-in-a-page-django


https://simpleisbetterthancomplex.com/tutorial/2016/08/15/how-to-create-a-password-confirmation-view.html

https://simpleisbetterthancomplex.com/tutorial/2018/01/18/how-to-implement-multiple-user-types-with-django.html

https://codepen.io/nikhil8krishnan/pen/WvYPvv

https://stackoverflow.com/questions/2539109/logging-users-out-of-a-django-site-after-n-minutes-of-inactivity

https://www.sliderrevolution.com/resources/css-modal/

https://www.joshwcomeau.com/animation/css-transitions/

https://stackoverflow.com/questions/25386119/whats-the-difference-between-a-onetoone-manytomany-and-a-foreignkey-field-in-d

https://devpyjp.com/how-to-export-csv-files-in-django-django-tutorials/

https://stackoverflow.com/questions/21168521/table-fixed-header-and-scrollable-body

www.imaputz.com/cssStuff/bigFourVersion.html

https://stackoverflow.com/questions/46391330/relation-does-not-exist-error-in-django

https://stackoverflow.com/questions/68144832/how-to-get-the-selected-rows-record-from-a-table-in-django

https://stackoverflow.com/questions/25836626/django-show-object-from-parent-table

https://stackoverflow.com/questions/68940721/how-to-show-data-from-django-models-whose-boolean-field-is-true

https://stackoverflow.com/questions/55650390/change-django-boolean-value-from-default-value-false-to-something-like-no

http://www.dennisbottaro.com/django-models-parent-child-template-rendering/

https://code.djangoproject.com/ticket/7623

https://codepen.io/nw/pen/udkIB

https://algotronics.wordpress.com/2015/10/23/dj2exe/

https://pypi.org/project/shortuuid/

https://stackoverflow.com/questions/60546349/django-generate-bar-code-and-save-into-image-field

https://github.com/ReconCubed/django-profanity-filter

https://www.youtube.com/watch?v=HR0YAGkBW58&ab_channel=GoDjango

https://www.w3.org/Style/Examples/007/folding.en.html#view10

https://stackoverflow.com/questions/29714763/django-check-if-checkbox-is-selected

https://python.plainenglish.io/generate-and-serve-pdf-files-with-django-e3efd9fde7bc

https://greenphire.com/careers/

https://www.cockroachlabs.com/pricing/

https://supabase.com/pricing

https://stackoverflow.com/questions/54330831/django-display-specific-text-if-date-is-older-than-10-days/54331220#54331220

https://stackoverflow.com/questions/50660395/reportlab-how-to-change-page-orientation/50660701

https://stackoverflow.com/questions/54703856/how-to-logout-an-inactive-user-in-django

https://alicecampkin.medium.com/how-to-set-up-environment-variables-in-django-f3c4db78c55f

https://stackoverflow.com/questions/41298963/is-there-a-function-for-generating-settings-secret-key-in-django

https://python.plainenglish.io/how-to-convert-your-dash-app-into-an-executable-gui-b1d4271a8fa7

https://pubs.acs.org/doi/pdf/10.1021/acs.jchemed.9b01131
class sample_initiated(Sample):
    SAMPLE_TEST = (
        ('Reverse Phase HPLC', 'Reverse Phase HPLC'),
        ('SEC HPLC', 'SEC HPLC'),
        ('UV-VIS', 'UV-VIS'),
        ('Karl-Fischer', 'Karl-Fischer'),
        ('pH', 'pH'),
        ('Dissolution', 'Dissolution'),
        ('Wet Chemistry', 'Wet Chemistry'),
        ('Raw Material', 'Raw Material'),
        ('CTL Testing', 'CTL Testing'),
    )
    initiated = models.BooleanField(default=True)
    sample_test = models.CharField(max_length=200, choices = SAMPLE_TEST)
    initiated_by = models.ForeignKey(User, on_delete=models.CASCADE)
    initiated_date = models.DateTimeField(default=datetime.now, blank=True)

class sample_result(models.Model):
    sample = models.OneToOneField(
        Sample,
        on_delete=models.CASCADE,
        primary_key=True,
        default=None,
        null=False,
    )
    completed_by = models.ForeignKey(User, on_delete=models.CASCADE)
    result = models.CharField(max_length=200)
    result_date = models.DateTimeField(default=datetime.now, blank=True)


<div>
    <table> <!-- Table that will hold sample model values -->
        {% csrf_token %}
        {% for sample in samples %}
        <tr>
            <th>
                Sample Name
                <img src="#"/>
            </th>
            <th>
                Description
            </th>
            <th>
                Tracking Number
                <img src="#"/>
            </th>
            <th>
                Volume/Size
            </th>
            <th>
                Type
                <img src="#"/>
            </th>
            <th>
                Expiration
                <img src="#"/>
            </th>
            <th>
                Logged Date
                <img src="#"/>
            </th>
            <th>
                Logged By
                <img src="#"/>
            </th>
        </tr>
        <tr>
            <td>{{samples.sample_name}}</td>
            <td>{{samples.sample_description}}</td>
        </tr>
        {% endfor %}
    </table>
</div>

        self.fields["logged_by"].widget.attrs.update({
            'type': 'text',
            'placeholder': 'Logged By',
            'class': 'registration-input',
            'autocomplete': 'off',
        })



class SampleCreate(LoginRequiredMixin, CreateView):
    template_name = 'sample'
    model= Sample
    form_class = SampleForm
    def form_valid(self, form):
        form.instance.logged_by = self.request.user
        return super().form_valid(form)

FreeLims_sample

<button>
                    <a href="{% url 'Initiate' pk=samples.pk %}"></a>
                </button>

                'Comment, if None: Write (N/A)'

                    def save(self, *args, **kwargs):
        is_new = not self.pk
        super().save(*args, **kwargs)
        if is_new:
            Result.objects.create(parent=self)


class DisposeForm(forms.Form):

    dispose = forms.ModelMultipleChoiceField(queryset=Cheminventory.objects.all())

    def __init__(self, *args, dispose_pk=None, **kwargs):
        super(forms.Form, self).__init__(*args, **kwargs)
        if dispose_pk is not None:
            self.fields['Lab_lot'].queryset = Cheminventory.objects.filter(
                dispose=dispose_pk
            )

def InventoryDispose(request):
    inventories = Cheminventory.objects.all()
    list_of_input_ids = request.GET.getlist('inputs')
    for i in list_of_input_ids:
        print(i)



    context = {
        'inventories': inventories,
    }
    return render(request, 'FreeLims/Inventory.html', context)


 <!--<div class="home-notification-tbl-container-2">
                <span> Reagent Notification</span>
                <table>
                    <thead>
                    <tr>
                        <th>Reagent Name</th>
                        <th>Manufacturer</th>
                        <th>Globalims Lot</th>
                        <th>Volume</th>
                        <th>Expiry</th>
                        <th>Location</th>
                        <th>Quarantine</th>
                        <th>Days to Expiry</th>
                    </tr>
                    </thead>
                    {% csrf_token %}
                    {% for inventory in inventories %}
                    {% if inventory.inv_disposal == False %}
                    <tbody>
                        {% if inventory.expiry|less_Than_Three_Day %}
                        <tr>
                            <td class="high-priority-tr-data">{{inventory.name}}</td>
                            <td class="high-priority-tr-data">{{inventory.manufacturer}}</td>
                            <td class="high-priority-tr-data">{{inventory.Lab_lot}}</td>
                            <td class="high-priority-tr-data">{{inventory.volume_size}}</td>
                            <td class="high-priority-tr-data">{{inventory.expiry}}</td>
                            <td class="high-priority-tr-data">{{inventory.location}}</td>
                            <td class="high-priority-tr-data">{{inventory.quarantine|yesno:"Yes, No"}}</td>
                            <td class="high-priority-tr-data">{{inventory.expiry|days_Remaining}}</td>
                        </tr>
                        {% endif %}
                        {% if inventory.expiry|less_Than_Fifteen_Days %}
                        <tr>
                            <td class="low-priority-tr-data">{{sample.sample_name}}</td>
                            <td class="low-priority-tr-data">{{sample.sample_description}}</td>
                            <td class="low-priority-tr-data">{{sample.tracking_number}}</td>
                            <td class="low-priority-tr-data">{{sample.sample_quantity}}x{{sample.sample_volume}}</td>
                            <td class="low-priority-tr-data">{{sample.expiration_date}}</td>
                            <td class="low-priority-tr-data">{{sample.initiated|yesno:"Initiated, Pending"}}</td>
                            {% if sample.result_pf > 0 %}
                            <td class="low-priority-tr-data">Yes</td>
                            {% else %}
                            <td class="low-priority-tr-data">No</td>
                            {% endif %}
                            <td class="low-priority-tr-data">{{sample.expiration_date|days_Remaining}}</td>
                        </tr>
                        {% endif %}
                       {% if inventory.expiry_date|less_Than_Thirty_Days %}
                        <tr>
                            <td class="medium-priority-tr-data">{{sample.sample_name}}</td>
                            <td class="medium-priority-tr-data">{{sample.sample_description}}</td>
                            <td class="medium-priority-tr-data">{{sample.tracking_number}}</td>
                            <td class="medium-priority-tr-data">{{sample.sample_quantity}}x{{sample.sample_volume}}</td>
                            <td class="medium-priority-tr-data">{{sample.expiration_date}}</td>
                            <td class="medium-priority-tr-data">{{sample.initiated|yesno:"Initiated, Pending"}}</td>
                            {% if sample.result_pf > 0 %}
                            <td class="medium-priority-tr-data">Yes</td>
                            {% else %}
                            <td class="medium-priority-tr-data">No</td>
                            {% endif %}
                            <td class="medium-priority-tr-data">{{sample.expiration_date|days_Remaining}}</td>
                        </tr>
                        {% endif %}
                    </tbody>
                    {% endif %}
                    {% endfor %}
                </table>
            </div>-->


for sample in Sample.objects.all().values_list('sample_name', 'sample_description', 'tracking_number', 'sample_volume', 'sample_quantity', 'sample_type', 'expiration_date'):

page <pdf:pagenumber> of <pdf:pagecount>

    samples = Sample.objects.get(id=pk)
    now = datetime.now()
    user = User.objects.get(pk=request.user.id)
    organization = user.profile.organization
    tracking = str(samples.tracking_number)
    date_time = now.strftime("%m/%d/%Y")
    context = {
        'samples': samples,
        'now': date_time,
        'organization': organization,
    }
    if samples.organization == organization:
        pdf = render_to_pdf('FreeLims/resultSummary.html', context)
        response = HttpResponse(pdf, content_type='application/pdf')
        filename = tracking + "_" + date_time + ".pdf"
        content = "inline; filename= %s " %(filename)
        response['Content-Disposition'] = content
        return response
    else:
        return redirect('Results')



        linh_le@fitnyc.edu

        amityville in the hood
        untold story

        LutherSturmanPharma

        title of each page


        #66beff <- Neutral Info Color


     Alert Styling
    min-width: 200px;
    width: auto;
    height: 25px;
    color: black;
    border-radius: 25px;
    background: #66BEFF;
    border-color: #0073ff;
    text-align: center;
    border-style: solid;


    .sample-submit-modal-sm {
    position: absolute;
    margin-left: 30%;
    top: 5%;
    margin-Top: 3px;
    width: 400px;
    height: 350px;
    background-color: Transparent;
    opacity: 0;
    border-radius: 50px;
    transform: translate(-50%, -50%);
    visibility: hidden;
    transform: scale(1.1);
    transition: visibility 0s linear 0.25s, opacity 0.25s 0s, transform 0.25s;
}
modal:target {
  visibility: visible;
  opacity: 1;
}
Must add Criteria to form

        if 'newPivateKey' in request.POST:
            secretKey = get_random_secret_key()
            newKeyForm = privateKeyChangeForm(request.POST, instance=profiles)
            obj = newKeyForm.save(commit=False)
            obj.Secret_Key = secretKey
            obj.save()
            email_subject = 'GlobaLIMS New Secret Key'
            email = profiles.email
            email_body = 'Here is your new Secret Key. Please copy it to a secure location: ' + str(profiles.Secret_Key)
            send_mail(
                email_subject,
                email_body,
                'caretagus@gmail.com',
                [email],
                fail_silently=True,
            )
            logout(request)
            messages.success(request, 'Your New Secret Key Has Been Generated. Please Check Your Email!')

        ++0i(($s(mhh=@gaz)k_jf##-49ar&tv$9=#+le)x7ln3!51%5

        <input type="text" class="registration-input" placeholder="Username" name="userName" >
        <input type="password" class="registration-input" placeholder="Password" name="pWord">



<div class="reagent-submit-modal" id="samplesubmit">
    <div class="reagent-submit-modal-content">
        <a href="" class="modal__close">Close</a>
        {% if messages %}
        {% for message in messages %}
        {% if 'error' in message.tags %}
        <div class="error-message" style="margin-left: 15%; margin-top: 0;">
            <p>{{message}}</p>
        </div>
        {% endif %}
        {% if 'success' in message.tags %}
        <div class="success-message" style="margin-left: 15%; margin-top: 0;">
            <p>{{message}}</p>
        </div>
        {% endif %}
        {% endfor %}
        {% else %}
        <span class="registration-header" style="margin-left:25px">Sample Log-In Form</span>
        {% endif %}
        <form action="" method="POST">
            {% csrf_token %}
            <div class="reagent-submit-left">
                {{form.sample_name}}
                {{form.sample_description}}
                {{form.tracking_number}}
                <span class="reagent-span">Sample Expiry</span>
                {{form.expiration_date}}
                <input type="reset" value="Clear Input Field" class="reagent-submit">
            </div>
            <div class="reagent-submit-right">
                {{form.sample_quantity}}
                {{form.sample_volume}}
                {{form.sample_type}}
                <input type="text" class="reagent-input" placeholder="Username" name="username" >
                <input type="password" class="reagent-input" placeholder="Password" name="password">
                <input type="submit" Value="Submit" class="reagent-submit">
            </div>
        </form>
    </div>
</div>

<div class="sample-submit-modal-sm" id="namefilter">
    <div class="filter-content-modal-xs">
        <a href="" class="modal__close">Close</a>
        <span class="registration-header" style="margin-left:25px">Filter by Sample Name </span>
        <form action="" method="get">
            {% csrf_token %}
            {{myfilter.form.name}}
            <input type="submit" Value="Filter" class="registration-submit">
            <input type="reset" value="Clear Input Field" class="registration-submit">
        </form>
    </div>
</div>
<div class="sample-submit-modal-sm" id="descfilter">
    <div class="filter-content-modal-xs">
        <a href="" class="modal__close">Close</a>
        <span class="registration-header" style="margin-left:25px">Filter by Description </span>
        <form action="" method="get">
            {% csrf_token %}
            {{myfilter.form.description}}
            <input type="submit" Value="Filter" class="registration-submit">
            <input type="reset" value="Clear Input Field" class="registration-submit">
        </form>
    </div>
</div>


position: relative;
    display: flex;
    width: 200px;
    height: 75px;
    resize: vertical;
    min-height: 25px;
    max-height: 125px;
    left: 19%;
    background: white;
    border-radius: 20px;
    margin-top: 10px;
    text-align: center;
    align-items: center;
    justify-content: center;
    /*background-color: #f2f2f2; */
    background-repeat:no-repeat;
    font-family: Times, sans-serif;
    overflow-wrap: break-word;
    word-wrap: break-word;
    hyphens: auto;
    border: none;
    cursor:pointer;
    outline:none;
    color: #2b6777;
    font-family: Arial, sans-serif;

registration-input

<div class="error-message" style="margin-left: 15%; margin-top: 0;">
    <p>{{message}}</p>
</div>

<div class="success-message" style="margin-left: 15%; margin-top: 0;">
    <p>{{message}}</p>
</div>

<img src="https://i.ibb.co/P9zyW62/splashimg3.jpg" alt="splashimg3" border="0">
<img src="https://i.ibb.co/pKx8k52/splashimg2.jpg" alt="splashimg2" border="0">
<img src="https://i.ibb.co/0MbCwMr/splashimg1.jpg" alt="splashimg1" border="0">

http://127.0.0.1:8000/Results_review/12/#reviewResult

